From 4ec0435a8e0893fc567b45f1662711b60c38c228 Mon Sep 17 00:00:00 2001
From: Marc Rousavy <marcrousavy@hotmail.com>
Date: Tue, 23 Nov 2021 15:44:07 +0100
Subject: [PATCH] fix: Fix duplicate `JHashMap` definition by moving to custom
 namespace

Technically `JHashMap` is duplicated now, but in separate namespaces. If I were to remove my `JHashMap` (and `JArrayList`) definitions, the user is forced to use fbjni v3.
---
 node_modules/react-native-vision-camera/android/src/main/cpp/JSIJNIConversion.cpp       | 6 +++---
 node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.cpp | 8 ++++----
 node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.h   | 8 ++++----
 3 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/node_modules/react-native-vision-camera/android/src/main/cpp/JSIJNIConversion.cpp b/node_modules/react-native-vision-camera/android/src/main/cpp/JSIJNIConversion.cpp
index e85a6f748d..4fcb7e6406 100644
--- a/node_modules/react-native-vision-camera/android/src/main/cpp/JSIJNIConversion.cpp
+++ b/node_modules/react-native-vision-camera/android/src/main/cpp/JSIJNIConversion.cpp
@@ -156,10 +156,10 @@ jsi::Value JSIJNIConversion::convertJNIObjectToJSIValue(jsi::Runtime &runtime, c
     auto array = toArrayListFunc(object.get());
     return convertJNIObjectToJSIValue(runtime, array);
 
-  } else if (object->isInstanceOf(jni::JHashMap<jstring, jobject>::javaClassStatic())) {
+  } else if (object->isInstanceOf(JHashMap<jstring, jobject>::javaClassStatic())) {
     // HashMap<K, V>
 
-    auto map = static_ref_cast<jni::JHashMap<jstring, jobject>>(object);
+    auto map = static_ref_cast<JHashMap<jstring, jobject>>(object);
 
     auto result = jsi::Object(runtime);
     for (const auto& entry : *map) {
@@ -173,7 +173,7 @@ jsi::Value JSIJNIConversion::convertJNIObjectToJSIValue(jsi::Runtime &runtime, c
   } else if (object->isInstanceOf(react::ReadableMap::javaClassStatic())) {
     // ReadableMap
 
-    static const auto toHashMapFunc = react::ReadableMap::javaClassLocal()->getMethod<jni::JHashMap<jstring, jobject>()>("toHashMap");
+    static const auto toHashMapFunc = react::ReadableMap::javaClassLocal()->getMethod<JHashMap<jstring, jobject>()>("toHashMap");
 
     // call recursive, this time HashMap<K, V>
     auto hashMap = toHashMapFunc(object.get());
diff --git a/node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.cpp b/node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.cpp
index c2ca243890..affd4647b7 100644
--- a/node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.cpp
+++ b/node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.cpp
@@ -7,14 +7,14 @@
 #include <jni.h>
 #include <fbjni/fbjni.h>
 
+namespace vision {
 
-namespace facebook {
-namespace jni {
+using namespace facebook;
+using namespace jni;
 
 template <typename K, typename V>
 local_ref<JHashMap<K, V>> JHashMap<K, V>::create() {
   return JHashMap<K, V>::newInstance();
 }
 
-} // namespace jni
-} // namespace facebook
+} // namespace vision
diff --git a/node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.h b/node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.h
index c3df3276fd..b11d3c83ae 100644
--- a/node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.h
+++ b/node_modules/react-native-vision-camera/android/src/main/cpp/java-bindings/JHashMap.h
@@ -7,9 +7,10 @@
 #include <jni.h>
 #include <fbjni/fbjni.h>
 
+namespace vision {
 
-namespace facebook {
-namespace jni {
+using namespace facebook;
+using namespace jni;
 
 // TODO: Remove when fbjni 0.2.3 releases.
 template <typename K = jobject, typename V = jobject>
@@ -19,5 +20,4 @@ struct JHashMap : JavaClass<JHashMap<K, V>, JMap<K, V>> {
   static local_ref<JHashMap<K, V>> create();
 };
 
-} // namespace jni
-} // namespace facebook
+} // namespace vision
diff --git a/node_modules/react-native-vision-camera/VisionCamera.podspec b/node_modules/react-native-vision-camera/VisionCamera.podspec
index 8cfe1c6..e19a8e8 100644
--- a/node_modules/react-native-vision-camera/VisionCamera.podspec
+++ b/node_modules/react-native-vision-camera/VisionCamera.podspec
@@ -2,6 +2,15 @@ require "json"
 
 package = JSON.parse(File.read(File.join(__dir__, "package.json")))
 
+reactVersion = JSON.parse(File.read(File.join(__dir__, "..", "react-native", "package.json")))["version"]
+rnVersion = reactVersion.split('.')[1]
+folly_prefix = "RCT-"
+
+folly_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1 -DRNVERSION=' + rnVersion
+folly_compiler_flags = folly_flags + ' ' + '-Wno-comma -Wno-shorten-64-to-32'
+folly_version = '2020.01.13.00'
+boost_compiler_flags = '-Wno-documentation'
+
 Pod::Spec.new do |s|
   s.name         = "VisionCamera"
   s.version      = package["version"]
@@ -16,8 +25,15 @@ Pod::Spec.new do |s|
   s.pod_target_xcconfig = {
     "DEFINES_MODULE" => "YES",
     "USE_HEADERMAP" => "YES",
-    "HEADER_SEARCH_PATHS" => "\"$(PODS_TARGET_SRCROOT)/ReactCommon\" \"$(PODS_TARGET_SRCROOT)\" \"$(PODS_ROOT)/Headers/Private/React-Core\" \"$(PODS_ROOT)/Headers/Public/React-hermes\" \"$(PODS_ROOT)/Headers/Public/hermes-engine\""
+    "HEADER_SEARCH_PATHS" => "\"$(PODS_TARGET_SRCROOT)/ReactCommon\" \"$(PODS_TARGET_SRCROOT)\" \"$(PODS_ROOT)/RCT-Folly\" \"$(PODS_ROOT)/Headers/Private/React-Core\" \"$(PODS_ROOT)/Headers/Public/React-hermes\" \"$(PODS_ROOT)/Headers/Public/hermes-engine\""
   }
+
+   s.compiler_flags = folly_compiler_flags + ' ' + boost_compiler_flags
+   s.xcconfig               = {
+    "CLANG_CXX_LANGUAGE_STANDARD" => "c++14",
+    "HEADER_SEARCH_PATHS" => "\"$(PODS_ROOT)/boost\" \"$(PODS_ROOT)/glog\" \"$(PODS_ROOT)/#{folly_prefix}Folly\" \"${PODS_ROOT}/Headers/Public/React-hermes\" \"${PODS_ROOT}/Headers/Public/hermes-engine\"",
+                               "OTHER_CFLAGS" => "$(inherited)" + " " + folly_flags  }
+
   s.requires_arc = true
 
   # All source files that should be publicly visible
diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView.kt
index c3cd74b..11bde4d 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView.kt
@@ -372,10 +372,12 @@ class CameraView(context: Context, private val frameProcessorThread: ExecutorSer
         // User has selected a custom format={}. Use that
         val format = DeviceFormat(format!!)
         Log.i(TAG, "Using custom format - photo: ${format.photoSize}, video: ${format.videoSize} @ $fps FPS")
-        previewBuilder.setTargetResolution(format.videoSize)
-        imageCaptureBuilder.setTargetResolution(format.photoSize)
-        videoCaptureBuilder.setTargetResolution(format.videoSize)
-        imageAnalysisBuilder.setTargetResolution(format.videoSize)
+        val photoAspectRatio = aspectRatio(format.photoHeight, format.photoWidth)
+        val videoAspectRatio = aspectRatio(format.videoHeight, format.videoWidth)
+        previewBuilder.setTargetAspectRatio(videoAspectRatio)
+        imageCaptureBuilder.setTargetAspectRatio(photoAspectRatio)
+        videoCaptureBuilder.setTargetAspectRatio(videoAspectRatio)
+        imageAnalysisBuilder.setTargetAspectRatio(videoAspectRatio)
 
         fps?.let { fps ->
           if (format.frameRateRanges.any { it.contains(fps) }) {
diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/utils/DeviceFormat.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/utils/DeviceFormat.kt
index 3364d8c..2fe8e1c 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/utils/DeviceFormat.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/utils/DeviceFormat.kt
@@ -6,8 +6,14 @@ import com.facebook.react.bridge.ReadableMap
 
 class DeviceFormat(map: ReadableMap) {
   val frameRateRanges: List<Range<Int>>
+
   val photoSize: Size
+  val photoWidth: Int
+  val photoHeight: Int
+
   val videoSize: Size
+  val videoWidth: Int
+  val videoHeight: Int
 
   init {
     frameRateRanges = map.getArray("frameRateRanges")!!.toArrayList().map { range ->
@@ -16,8 +22,14 @@ class DeviceFormat(map: ReadableMap) {
       else
         throw IllegalArgumentException("DeviceFormat: frameRateRanges contained a Range that was not of type HashMap<*,*>! Actual Type: ${range?.javaClass?.name}")
     }
+
     photoSize = Size(map.getInt("photoWidth"), map.getInt("photoHeight"))
+    photoWidth = map.getInt("photoWidth")
+    photoHeight = map.getInt("photoHeight")
+
     videoSize = Size(map.getInt("videoWidth"), map.getInt("videoHeight"))
+    videoWidth = map.getInt("videoWidth")
+    videoHeight = map.getInt("videoHeight")
   }
 }
 