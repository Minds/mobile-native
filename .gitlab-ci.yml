stages:
  - test
  - qa
  - build
  - upload
  - release
  - release_store

variables:
  APK_NAME: Minds.apk

# Gets the version of the app parsing the gradle.properties file
.getversion: &getversion
  - 'export APPVERSION=`grep -o "^versionName=.*" android/gradle.properties | tr -d "versionName="`'

# Delete the build from browserstack
.delete_browserstack: &delete_browserstack
  - 'echo "Deleting browserstack credentials..."'
  - node tasks/deleteBrowserstackFile.js $TARGET_APK_NAME

# Move the apk to the root folder
.move_apk: &move_apk
  - mv app/build/outputs/apk/release/app-release.apk ../$APK_NAME

### TEST STAGE
test:jest:
  image: node:14.19.2
  stage: test
  interruptible: true
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - .jest/cache/
  before_script:
    - yarn install --frozen-lockfile
  script:
    - 'yarn prettier --check "./src/**/*.{ts,tsx,js,json}" "./*.{tsx,ts}"'
    - yarn tsc
    - yarn test --forceExit

# WebdriverIO Browserstack Tests
.wdio_tests: &wdio_tests
  image: node:14.19.2
  stage: qa
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  before_script:
    - yarn install --frozen-lockfile
  script:
    - yarn run test:real:ios
    - yarn run test:real:android
  artifacts:
    when: always
    paths:
      - wdioLogs

qa:develop:
  allow_failure: true
  script:
    - export BROWSERSTACK_IOS_APP_ID="IOS_RC"
    - export BROWSERSTACK_ANDROID_APP_ID="ANDROID_RC"
    - *wdio_tests
  only:
    refs:
      - /^develop$/

qa:rc:nightly:
  allow_failure: true
  script:
    - export BROWSERSTACK_IOS_APP_ID="IOS_RC"
    - export BROWSERSTACK_ANDROID_APP_ID="ANDROID_RC"
    - *wdio_tests
  only:
    refs:
      - /^develop$/
    variables:
      - $CI_RC_NIGHTLY_TESTS == "true"

qa:prod:nightly:
  allow_failure: true
  script:
    - export BROWSERSTACK_IOS_APP_ID="IOS_PRODUCTION"
    - export BROWSERSTACK_ANDROID_APP_ID="ANDROID_PRODUCTION"
    - *wdio_tests
  only:
    refs:
      - /^master$/
    variables:
      - $CI_PROD_NIGHTLY_TESTS == "true"

### BUILD STAGE
.prepare_build_android: &prepare_build_android
  image: circleci/android:api-30-node
  stage: build
  interruptible: true
  before_script:
    # PREPARE
    - *getversion
    - export ANDROID_SDK_HOME=$CI_PROJECT_DIR
    - export GRADLE_USER_HOME="$CI_PROJECT_DIR/.gradle"
    - sudo sysctl fs.inotify.max_user_watches=524288
    - sudo sysctl -p
    - sudo ln -s /lib/x86_64-linux-gnu/libncurses.so.6 /lib/x86_64-linux-gnu/libncurses.so.5
    - sudo ln -s /lib/x86_64-linux-gnu/libncursesw.so.6 /lib/x86_64-linux-gnu/libtinfo.so.5
    - yarn install --frozen-lockfile
    - cd android
    - bundle install --path=vendor/bundle
  artifacts:
    name: 'Minds APK'
    paths:
      - $APK_NAME
    expire_in: 45 days
    when: on_success

# Build Android production Full Version (Higher version code)
build:androidproduction:
  <<: *prepare_build_android
  script:
    - bundle exec fastlane assemble_build
    - *move_apk
  only:
    refs:
      - develop
      - master

# Production build for QA of MR
build:android_mr_production:
  <<: *prepare_build_android
  variables:
    APK_FILENAME: 'Minds-$CI_COMMIT_REF_SLUG.apk'
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_SLUG'
    paths:
      - node_modules/
      - android/vendor/bundle
      - .gradle/caches
      - .gradle/wrapper
      - .android/build-cache/
  script:
    - cp app/debug.keystore debug.keystore
    - export ENVFILE=".env.review"
    - bundle exec fastlane assemble_mr_build
    - *move_apk
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://minds-repo.s3.amazonaws.com/mobile/$APK_FILENAME
    on_stop: build:cleanup
  only:
    refs:
      - /^feat-*/
      - /^fix-*/
      - /^chore-*/
      - /^refactor-*/

# Cleanup APK from merged MRs
build:cleanup:
  image: circleci/android:api-30-node
  when: manual
  stage: build
  variables:
    APK_FILENAME: 'Minds-$CI_COMMIT_REF_SLUG.apk'
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://minds-repo.s3.amazonaws.com/mobile/$APK_FILENAME
    action: stop
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_SLUG'
    paths:
      - node_modules/
  before_script:
    - yarn install --frozen-lockfile
  script:
    - export TARGET_APK_NAME=$APK_FILENAME
    - *delete_browserstack
  only:
    refs:
      - /^feat-*/
      - /^fix-*/
      - /^chore-*/
      - /^refactor-*/

# Play store version (Lowest version code)
build:androidproduction-playstore:
  <<: *prepare_build_android
  script:
    - "sed -i 's/^versionCode=/# versionCode=/' android/gradle.properties"
    - "sed -i 's/^## versionCode/versionCode/' android/gradle.properties"
    - bundle exec fastlane assemble_build
    - *move_apk
  only:
    refs:
      - master

### UPLOAD STAGE
.upload_s3: &upload_s3
  stage: upload
  image: minds/ci:latest
  interruptible: true
  script:
    - echo "Upload $TARGET_APK_NAME"
    - aws s3 cp $APK_NAME s3://minds-repo/mobile/$TARGET_APK_NAME

.upload_browserstack: &upload_browserstack
  stage: upload
  image: node:14.19.2
  interruptible: true
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - .jest/cache/
  script:
    - yarn install --frozen-lockfile
    - *delete_browserstack
    - curl -u $CI_BROWSERSTACK_APIKEY -X POST "https://api-cloud.browserstack.com/app-live/upload" -F "file=@$APK_NAME;filename=$TARGET_APK_NAME"

# Upload production builds (Full version)
upload:s3:oss: # Upload to S3
  <<: *upload_s3
  before_script:
    - *getversion
    - export TARGET_APK_NAME=Minds-$APPVERSION.apk
  dependencies:
    - build:androidproduction
  only:
    refs:
      - master

upload:browserstack:oss: # Upload to Browserstack
  <<: *upload_browserstack
  before_script:
    - *getversion
    - export TARGET_APK_NAME=Minds-$APPVERSION.apk
  dependencies:
    - build:androidproduction
  only:
    refs:
      - master

# Upload production builds (play-store version)
upload:s3:playstore: # Upload to S3
  <<: *upload_s3
  before_script:
    - *getversion
    - export TARGET_APK_NAME="Minds-$APPVERSION-play_store.apk"
  dependencies:
    - build:androidproduction-playstore
  only:
    refs:
      - master

upload:browserstack:playstore: # Upload to Browserstack
  <<: *upload_browserstack
  before_script:
    - *getversion
    - export TARGET_APK_NAME="Minds-$APPVERSION-play_store.apk"
  dependencies:
    - build:androidproduction-playstore
  only:
    refs:
      - master

# Upload production RC (develop branch)
upload:s3:oss:rc: # Upload to S3
  <<: *upload_s3
  before_script:
    - *getversion
    - export TARGET_APK_NAME="Minds-$APPVERSION-RC.apk"
  dependencies:
    - build:androidproduction
  only:
    refs:
      - develop

upload:browserstack:oss:rc: # Upload to Browserstack
  <<: *upload_browserstack
  before_script:
    - *getversion
    - export TARGET_APK_NAME="Minds-$APPVERSION-RC.apk"
  dependencies:
    - build:androidproduction
  only:
    refs:
      - develop

# Upload MR builds to browserstack
upload:browserstack:mr:
  <<: *upload_browserstack
  before_script:
    - *getversion
    - export TARGET_APK_NAME=Minds-$CI_COMMIT_REF_SLUG.apk
  dependencies:
    - build:android_mr_production
  only:
    refs:
      - /^feat-*/
      - /^fix-*/
      - /^chore-*/
      - /^refactor-*/

### RELEASE STAGE

# Release Full Android
release:production:
  image: msantang78/ci-mobile:latest
  stage: release
  variables:
    APK_FILENAME: 'Minds-$CI_COMMIT_REF_SLUG.apk'
  dependencies:
    - build:androidproduction
    - upload:s3:oss
  artifacts:
    name: 'Release JSON'
    paths:
      - releases.json
      - android/fastlane/metadata/android/en-US/changelogs/default.txt
    expire_in: 7 days
    when: on_success
  when: manual
  only:
    refs:
      - master
  before_script:
    - node -v
    - yarn install
  script:
    - echo "Releasing $APK_FILENAME"
    - yarn release-json $APK_FILENAME
    - aws s3 cp releases.json s3://minds-repo/android/releases/releases.json

release_store:google_play:
  image: circleci/android:api-28-node
  stage: release_store
  before_script:
    - cd android
    - bundle install --path=vendor/bundle
    - 'echo $ANDROID_PLAYSTORE_JSON | base64 --decode > app/play-store.json'
  script:
    - echo "Upload to the play store Minds-$CI_COMMIT_REF_SLUG-play_store.apk"
    - bundle exec fastlane supply --apk ../Minds-$CI_COMMIT_REF_SLUG-play_store.apk
  dependencies:
    - release:production
    - build:androidproduction-playstore
  when: manual
  only:
    refs:
      - master

## CodePush releases
release:codepush-ios:
  image: node:14.19.1
  stage: release
  before_script:
    - npm install -g appcenter-cli
    - yarn install
  script:
    - appcenter codepush release-react -a Minds/Minds-iOS -d Production
  only:
    - /^patch-*/
  when: manual

release:codepush-android:
  image: node:14.19.1
  stage: release
  before_script:
    - npm install -g appcenter-cli
    - yarn install
  script:
    - appcenter codepush release-react -a Minds/Minds -d Production
  only:
    - /^patch-*/
  when: manual
