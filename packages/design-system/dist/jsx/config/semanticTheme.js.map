{
  "version": 3,
  "sources": ["../../../src/config/semanticTheme.ts"],
  "sourcesContent": ["import { createTheme, Variable } from '@tamagui/core';\n\nimport { tokens } from './tokens';\n\nconst semanticNames = [\n  'basic',\n  'primary',\n  'info',\n  'success',\n  'warning',\n  'danger',\n] as const;\ntype SemanticName = typeof semanticNames[number];\n\nexport type SimpleTheme = {\n  background: string | Variable<any> | Variable<string>;\n  backgroundFocus: string | Variable<any> | Variable<string>;\n  backgroundPress: string | Variable<any> | Variable<string>;\n  backgroundHover: string | Variable<any> | Variable<string>;\n  backgroundDisabled?: string | Variable<any> | Variable<string>;\n\n  borderColor: string | Variable<any> | Variable<string>;\n  borderColorFocus: string | Variable<any> | Variable<string>;\n  borderColorPress: string | Variable<any> | Variable<string>;\n  borderColorHover: string | Variable<any> | Variable<string>;\n\n  color: string | Variable<any> | Variable<string>;\n  colorFocus: string | Variable<any> | Variable<string>;\n  colorPress: string | Variable<any> | Variable<string>;\n  colorHover: string | Variable<any> | Variable<string>;\n};\n\nexport const createSemanticTheme = (theme: SemanticName): SimpleTheme =>\n  createTheme({\n    background: tokens.color[`color-${theme}-500`],\n    backgroundPress: tokens.color[`color-${theme}-600`],\n    backgroundFocus: tokens.color[`color-${theme}-700`],\n    backgroundHover: tokens.color[`color-${theme}-800`],\n    backgroundDisabled: tokens.color[`color-${theme}-transparent-500`],\n\n    borderColor: tokens.color[`color-${theme}-500`],\n    borderColorPress: tokens.color[`color-${theme}-600`],\n    borderColorFocus: tokens.color[`color-${theme}-700`],\n    borderColorHover: tokens.color[`color-${theme}-800`],\n\n    color: tokens.color[`color-basic-${theme === 'basic' ? '800' : '100'}`],\n    colorFocus:\n      tokens.color[`color-basic-${theme === 'basic' ? '700' : '200'}`],\n    colorPress:\n      tokens.color[`color-basic-${theme === 'basic' ? '800' : '300'}`],\n    colorHover:\n      tokens.color[`color-basic-${theme === 'basic' ? '900' : '400'}`],\n  });\n\nexport const sematicThemes = {\n  dark_basic: createSemanticTheme('basic'),\n  light_basic: createSemanticTheme('basic'),\n  dark_primary: createSemanticTheme('primary'),\n  light_primary: createSemanticTheme('primary'),\n  dark_info: createSemanticTheme('info'),\n  light_info: createSemanticTheme('info'),\n  dark_success: createSemanticTheme('success'),\n  light_success: createSemanticTheme('success'),\n  dark_warning: createSemanticTheme('warning'),\n  light_warning: createSemanticTheme('warning'),\n  dark_danger: createSemanticTheme('danger'),\n  light_danger: createSemanticTheme('danger'),\n};\n"],
  "mappings": "AAAA,SAAS,mBAA6B;AAEtC,SAAS,cAAc;AAEvB,MAAM,gBAAgB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAqBO,MAAM,sBAAsB,CAAC,UAClC,YAAY;AAAA,EACV,YAAY,OAAO,MAAM,SAAS;AAAA,EAClC,iBAAiB,OAAO,MAAM,SAAS;AAAA,EACvC,iBAAiB,OAAO,MAAM,SAAS;AAAA,EACvC,iBAAiB,OAAO,MAAM,SAAS;AAAA,EACvC,oBAAoB,OAAO,MAAM,SAAS;AAAA,EAE1C,aAAa,OAAO,MAAM,SAAS;AAAA,EACnC,kBAAkB,OAAO,MAAM,SAAS;AAAA,EACxC,kBAAkB,OAAO,MAAM,SAAS;AAAA,EACxC,kBAAkB,OAAO,MAAM,SAAS;AAAA,EAExC,OAAO,OAAO,MAAM,eAAe,UAAU,UAAU,QAAQ;AAAA,EAC/D,YACE,OAAO,MAAM,eAAe,UAAU,UAAU,QAAQ;AAAA,EAC1D,YACE,OAAO,MAAM,eAAe,UAAU,UAAU,QAAQ;AAAA,EAC1D,YACE,OAAO,MAAM,eAAe,UAAU,UAAU,QAAQ;AAC5D,CAAC;AAEI,MAAM,gBAAgB;AAAA,EAC3B,YAAY,oBAAoB,OAAO;AAAA,EACvC,aAAa,oBAAoB,OAAO;AAAA,EACxC,cAAc,oBAAoB,SAAS;AAAA,EAC3C,eAAe,oBAAoB,SAAS;AAAA,EAC5C,WAAW,oBAAoB,MAAM;AAAA,EACrC,YAAY,oBAAoB,MAAM;AAAA,EACtC,cAAc,oBAAoB,SAAS;AAAA,EAC3C,eAAe,oBAAoB,SAAS;AAAA,EAC5C,cAAc,oBAAoB,SAAS;AAAA,EAC3C,eAAe,oBAAoB,SAAS;AAAA,EAC5C,aAAa,oBAAoB,QAAQ;AAAA,EACzC,cAAc,oBAAoB,QAAQ;AAC5C;",
  "names": []
}
