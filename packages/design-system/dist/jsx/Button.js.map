{
  "version": 3,
  "sources": ["../../src/Button.tsx"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from 'react';\nimport {\n  ButtonNestingContext,\n  GetProps,\n  TamaguiElement,\n  ThemeableProps,\n  getVariableValue,\n  isRSC,\n  spacedChildren,\n  styled,\n  themeable,\n  useMediaPropsActive,\n} from '@tamagui/core';\nimport { getFontSize } from '@tamagui/font-size';\nimport { getButtonSized } from '@tamagui/get-button-sized';\nimport { useGetThemedIcon } from '@tamagui/helpers-tamagui';\nimport { ThemeableStack } from '@tamagui/stacks';\nimport {\n  SizableText,\n  TextParentStyles,\n  wrapChildrenInText,\n} from '@tamagui/text';\nimport { FunctionComponent, forwardRef, useContext } from 'react';\n\ntype ButtonIconProps = { color?: string; size?: number };\ntype IconProp = JSX.Element | FunctionComponent<ButtonIconProps> | null;\n\nexport type ButtonProps = Omit<TextParentStyles, 'TextComponent'> &\n  GetProps<typeof ButtonFrame> &\n  ThemeableProps & {\n    /**\n     * add icon before, passes color and size automatically if Component\n     */\n    icon?: IconProp;\n    /**\n     * add icon after, passes color and size automatically if Component\n     */\n    iconAfter?: IconProp;\n    /**\n     * adjust icon relative to size\n     */\n    /**\n     * default: -1\n     */\n    scaleIcon?: number;\n    /**\n     * make the spacing elements flex\n     */\n    spaceFlex?: number | boolean;\n    /**\n     * adjust internal space relative to icon size\n     */\n    scaleSpace?: number;\n  };\n\nconst NAME = 'Button';\n\nexport const ButtonFrame = styled(ThemeableStack, {\n  name: NAME,\n  tag: 'button',\n  focusable: true,\n  hoverTheme: true,\n  pressTheme: true,\n  backgrounded: true,\n  borderWidth: 1,\n  borderColor: 'transparent',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexWrap: 'nowrap',\n  flexDirection: 'row',\n\n  // if we wanted this only when pressable = true, we'd need to merge variants?\n  cursor: 'pointer',\n\n  pressStyle: {\n    borderColor: 'transparent',\n  },\n\n  hoverStyle: {\n    borderColor: 'transparent',\n  },\n\n  focusStyle: {\n    borderColor: '$borderColorFocus',\n  },\n\n  variants: {\n    size: {\n      '...size': getButtonSized,\n    },\n\n    active: {\n      true: {\n        hoverStyle: {\n          backgroundColor: '$background',\n        },\n      },\n    },\n\n    disabled: {\n      true: {\n        pointerEvents: 'none',\n        backgroundColor: '$backgroundDisabled',\n        opacity: 0.65,\n      },\n    },\n  } as const,\n\n  defaultVariants: {\n    size: '$3',\n  },\n});\n\n// see TODO breaking types\n// type x = GetProps<typeof ButtonFrame>\n// type y = x['size']\n\nexport const ButtonText = styled(SizableText, {\n  color: '$color',\n  userSelect: 'none',\n  cursor: 'pointer',\n  // flexGrow 1 leads to inconsistent native style where text pushes to start of view\n  flexGrow: 0,\n  flexShrink: 1,\n  ellipse: true,\n\n  size: '$b',\n  fontFamily: '$body',\n  fontWeight: '500',\n});\n\nexport function useButton(\n  props: ButtonProps,\n  { Text = ButtonText }: { Text: any } = { Text: ButtonText },\n) {\n  // careful not to desctructure and re-order props, order is important\n  const {\n    children,\n    icon,\n    iconAfter,\n    noTextWrap,\n    theme: themeName,\n    space,\n    spaceFlex,\n    scaleIcon = 1,\n    scaleSpace = 0.66,\n    separator,\n\n    // text props\n    color,\n    fontWeight,\n    letterSpacing,\n    fontSize,\n    fontFamily,\n    textAlign,\n    textProps,\n    ...rest\n  } = props;\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const isNested = isRSC ? false : useContext(ButtonNestingContext);\n  const mediaActiveProps = useMediaPropsActive(props);\n  const size = mediaActiveProps.size || '$b';\n  const iconSize =\n    (typeof size === 'number' ? size * 0.5 : getFontSize('$b')) * scaleIcon;\n  const getThemedIcon = useGetThemedIcon({ size: iconSize, color });\n  const [themedIcon, themedIconAfter] = [icon, iconAfter].map(getThemedIcon);\n  const spaceSize = getVariableValue(iconSize) * scaleSpace;\n  const contents = wrapChildrenInText(Text, mediaActiveProps);\n  const inner =\n    themedIcon || themedIconAfter\n      ? spacedChildren({\n          // a bit arbitrary but scaling to font size is necessary so long as button does\n          space: spaceSize,\n          spaceFlex,\n          separator,\n          direction:\n            props.flexDirection === 'column' ||\n            props.flexDirection === 'column-reverse'\n              ? 'vertical'\n              : 'horizontal',\n          children: [themedIcon, contents, themedIconAfter],\n        })\n      : contents;\n\n  return {\n    spaceSize,\n    isNested,\n    props: {\n      ...(props.disabled && {\n        // in rnw - false still has keyboard tabIndex, undefined = not actually focusable\n        focusable: undefined,\n        // even with tabIndex unset, it will keep focusStyle on web so disable it here\n        focusStyle: {\n          borderColor: '$background',\n        },\n      }),\n      // fixes SSR issue + DOM nesting issue of not allowing button in button\n      ...(isNested\n        ? {\n            tag: 'span',\n          }\n        : {}),\n      ...rest,\n      children: isRSC ? (\n        inner\n      ) : (\n        <ButtonNestingContext.Provider value={true}>\n          {inner}\n        </ButtonNestingContext.Provider>\n      ),\n    },\n  };\n}\n\nconst ButtonComponent = forwardRef<TamaguiElement, ButtonProps>(function Button(\n  props,\n  ref,\n) {\n  const { props: buttonProps } = useButton(props);\n  return <ButtonFrame {...buttonProps} ref={ref} />;\n});\n\nexport const buttonStaticConfig = {\n  inlineProps: new Set([\n    // text props go here (can't really optimize them, but we never fully extract button anyway)\n    // may be able to remove this entirely, as the compiler / runtime have gotten better\n    'color',\n    'fontWeight',\n    'fontSize',\n    'fontFamily',\n    'letterSpacing',\n    'textAlign',\n  ]),\n};\n\nexport const Button = ButtonFrame.extractable(\n  themeable(ButtonComponent, ButtonFrame.staticConfig),\n  buttonStaticConfig,\n);\n"],
  "mappings": "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",
  "names": ["Button"]
}
