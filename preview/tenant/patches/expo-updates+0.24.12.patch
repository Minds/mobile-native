diff --git a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/DisabledUpdatesController.kt b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/DisabledUpdatesController.kt
index 855b073..518c435 100644
--- a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/DisabledUpdatesController.kt
+++ b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/DisabledUpdatesController.kt
@@ -122,12 +122,14 @@ class DisabledUpdatesController(
   }
 
   override fun checkForUpdate(
+    channel: String?,
     callback: IUpdatesController.ModuleCallback<IUpdatesController.CheckForUpdateResult>
   ) {
     callback.onFailure(UpdatesDisabledException("You cannot check for updates when expo-updates is not enabled."))
   }
 
   override fun fetchUpdate(
+    channel: String?,
     callback: IUpdatesController.ModuleCallback<IUpdatesController.FetchUpdateResult>
   ) {
     callback.onFailure(UpdatesDisabledException("You cannot fetch update when expo-updates is not enabled."))
diff --git a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/EnabledUpdatesController.kt b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/EnabledUpdatesController.kt
index 9de09f1..4759b02 100644
--- a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/EnabledUpdatesController.kt
+++ b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/EnabledUpdatesController.kt
@@ -225,15 +225,28 @@ class EnabledUpdatesController(
     callback.onSuccess(stateMachine.context)
   }
 
-  override fun checkForUpdate(callback: IUpdatesController.ModuleCallback<IUpdatesController.CheckForUpdateResult>) {
-    val procedure = CheckForUpdateProcedure(context, updatesConfiguration, databaseHolder, logger, fileDownloader, selectionPolicy, launchedUpdate) {
+  override fun checkForUpdate(channel: String?, callback: IUpdatesController.ModuleCallback<IUpdatesController.CheckForUpdateResult>) {
+    /**
+     * Allow to override the channel name in the request headers, used for minds preview app 
+     */
+    val updateConfigurationToUse = if (channel == null) updatesConfiguration else UpdatesConfiguration(context, mapOf("requestHeaders" to hashMapOf(
+      "expo-channel-name" to channel
+    )))
+
+    val procedure = CheckForUpdateProcedure(context, updateConfigurationToUse, databaseHolder, logger, fileDownloader, selectionPolicy, launchedUpdate) {
       callback.onSuccess(it)
     }
     stateMachine.queueExecution(procedure)
   }
 
-  override fun fetchUpdate(callback: IUpdatesController.ModuleCallback<IUpdatesController.FetchUpdateResult>) {
-    val procedure = FetchUpdateProcedure(context, updatesConfiguration, databaseHolder, updatesDirectory, fileDownloader, selectionPolicy, launchedUpdate) {
+  override fun fetchUpdate(channel: String?, callback: IUpdatesController.ModuleCallback<IUpdatesController.FetchUpdateResult>) {
+    /**
+     * Allow to override the channel name in the request headers, used for minds preview app 
+     */
+    val updateConfigurationToUse = if (channel == null) updatesConfiguration else UpdatesConfiguration(context, mapOf("requestHeaders" to hashMapOf(
+      "expo-channel-name" to channel
+    )))
+    val procedure = FetchUpdateProcedure(context, updateConfigurationToUse, databaseHolder, updatesDirectory, fileDownloader, selectionPolicy, launchedUpdate) {
       callback.onSuccess(it)
     }
     stateMachine.queueExecution(procedure)
diff --git a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/IUpdatesController.kt b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/IUpdatesController.kt
index 84fb97e..4de9f6f 100644
--- a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/IUpdatesController.kt
+++ b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/IUpdatesController.kt
@@ -107,7 +107,7 @@ interface IUpdatesController {
     class RollBackToEmbedded(val commitTime: Date) : CheckForUpdateResult(Status.ROLL_BACK_TO_EMBEDDED)
     class ErrorResult(val error: Exception, val message: String) : CheckForUpdateResult(Status.ERROR)
   }
-  fun checkForUpdate(callback: ModuleCallback<CheckForUpdateResult>)
+  fun checkForUpdate(channel: String?, callback: ModuleCallback<CheckForUpdateResult>)
 
   sealed class FetchUpdateResult(private val status: Status) {
     private enum class Status {
@@ -122,7 +122,7 @@ interface IUpdatesController {
     class RollBackToEmbedded : FetchUpdateResult(Status.ROLL_BACK_TO_EMBEDDED)
     class ErrorResult(val error: Exception) : FetchUpdateResult(Status.ERROR)
   }
-  fun fetchUpdate(callback: ModuleCallback<FetchUpdateResult>)
+  fun fetchUpdate(channel: String?, callback: ModuleCallback<FetchUpdateResult>)
 
   fun getExtraParams(callback: ModuleCallback<Bundle>)
 
diff --git a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/UpdatesDevLauncherController.kt b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/UpdatesDevLauncherController.kt
index 0199670..c38af70 100644
--- a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/UpdatesDevLauncherController.kt
+++ b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/UpdatesDevLauncherController.kt
@@ -305,12 +305,14 @@ class UpdatesDevLauncherController(
   }
 
   override fun checkForUpdate(
+    channel: String?,
     callback: IUpdatesController.ModuleCallback<IUpdatesController.CheckForUpdateResult>
   ) {
     callback.onFailure(NotAvailableInDevClientException("Cannot check for update in a development client. A non-development build should be used to test this functionality."))
   }
 
   override fun fetchUpdate(
+    channel: String?,
     callback: IUpdatesController.ModuleCallback<IUpdatesController.FetchUpdateResult>
   ) {
     callback.onFailure(NotAvailableInDevClientException("Cannot fetch update in a development client. A non-development build should be used to test this functionality."))
diff --git a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/UpdatesModule.kt b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/UpdatesModule.kt
index 50198c6..20c33d9 100644
--- a/node_modules/expo-updates/android/src/main/java/expo/modules/updates/UpdatesModule.kt
+++ b/node_modules/expo-updates/android/src/main/java/expo/modules/updates/UpdatesModule.kt
@@ -112,8 +112,9 @@ class UpdatesModule : Module() {
       })
     }
 
-    AsyncFunction("checkForUpdateAsync") { promise: Promise ->
+    AsyncFunction("checkForUpdateAsync") { channel: String?, promise: Promise ->
       UpdatesController.instance.checkForUpdate(
+        channel,
         object : IUpdatesController.ModuleCallback<IUpdatesController.CheckForUpdateResult> {
           override fun onSuccess(result: IUpdatesController.CheckForUpdateResult) {
             when (result) {
@@ -160,8 +161,9 @@ class UpdatesModule : Module() {
       )
     }
 
-    AsyncFunction("fetchUpdateAsync") { promise: Promise ->
+    AsyncFunction("fetchUpdateAsync") {channel: String?, promise: Promise ->
       UpdatesController.instance.fetchUpdate(
+        channel,
         object : IUpdatesController.ModuleCallback<IUpdatesController.FetchUpdateResult> {
           override fun onSuccess(result: IUpdatesController.FetchUpdateResult) {
             when (result) {
diff --git a/node_modules/expo-updates/build/Updates.d.ts b/node_modules/expo-updates/build/Updates.d.ts
index 49a31cf..4b1eb90 100644
--- a/node_modules/expo-updates/build/Updates.d.ts
+++ b/node_modules/expo-updates/build/Updates.d.ts
@@ -114,7 +114,7 @@ export declare function reloadAsync(): Promise<void>;
  * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or
  * timeout communicating with the server. It also rejects when expo-updates is not enabled.
  */
-export declare function checkForUpdateAsync(): Promise<UpdateCheckResult>;
+export declare function checkForUpdateAsync(channel?: string): Promise<UpdateCheckResult>;
 /**
  * Retrieves the current extra params.
  *
@@ -167,7 +167,7 @@ export declare function clearLogEntriesAsync(): Promise<void>;
  * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or
  * timeout communicating with the server. It also rejects when expo-updates is not enabled.
  */
-export declare function fetchUpdateAsync(): Promise<UpdateFetchResult>;
+export declare function fetchUpdateAsync(channel?: string): Promise<UpdateFetchResult>;
 /**
  * @hidden
  */
diff --git a/node_modules/expo-updates/build/Updates.d.ts.map b/node_modules/expo-updates/build/Updates.d.ts.map
index 43d57a3..963e99f 100644
--- a/node_modules/expo-updates/build/Updates.d.ts.map
+++ b/node_modules/expo-updates/build/Updates.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Updates.d.ts","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,WAAW,EACX,QAAQ,EACR,iBAAiB,EACjB,iBAAiB,EACjB,8BAA8B,EAC9B,eAAe,EACf,gCAAgC,EACjC,MAAM,iBAAiB,CAAC;AAEzB;;;;;;;;GAQG;AACH,eAAO,MAAM,SAAS,EAAE,OAAiC,CAAC;AAE1D;;;;GAIG;AACH,eAAO,MAAM,QAAQ,EAAE,MAAM,GAAG,IAGtB,CAAC;AAEX;;;GAGG;AACH,eAAO,MAAM,cAAc,EAAE,MAAgD,CAAC;AAE9E;;;;GAIG;AACH,eAAO,MAAM,OAAO,EAAE,MAAM,GAAG,IAAkC,CAAC;AAElE;;GAEG;AACH,eAAO,MAAM,cAAc,EAAE,MAAM,GAAG,IAAyC,CAAC;AAShF;;GAEG;AACH,eAAO,MAAM,kBAAkB,EAAE,8BAA8B,GAAG,IACQ,CAAC;AAG3E;;GAEG;AACH,eAAO,MAAM,WAAW,EAAE,WAA2C,CAAC;AAEtE;;;;;;;;GAQG;AACH,eAAO,MAAM,iBAAiB,EAAE,OAAgD,CAAC;AAEjF;;;GAGG;AACH,eAAO,MAAM,gBAAgB,EAAE,OAA+C,CAAC;AAG/E;;GAEG;AACH,eAAO,MAAM,qBAAqB,EAAE,OAAoD,CAAC;AAEzF;;;;;;;;GAQG;AACH,eAAO,MAAM,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAEnC,CAAC;AAEL;;;;;GAKG;AACH,eAAO,MAAM,SAAS,EAAE,IAAI,GAAG,IAEvB,CAAC;AAoBT;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,wBAAsB,WAAW,IAAI,OAAO,CAAC,IAAI,CAAC,CAcjD;AAED;;;;;;;;;;;;;;GAcG;AACH,wBAAsB,mBAAmB,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAqBtE;AAED;;;;GAIG;AACH,wBAAsB,mBAAmB,IAAI,OAAO,CAAC;IAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;CAAE,CAAC,CAM9E;AAED;;;;;;GAMG;AACH,wBAAsB,kBAAkB,CACtC,GAAG,EAAE,MAAM,EACX,KAAK,EAAE,MAAM,GAAG,IAAI,GAAG,SAAS,GAC/B,OAAO,CAAC,IAAI,CAAC,CAMf;AAED;;;;;;;;GAQG;AACH,wBAAsB,mBAAmB,CAAC,MAAM,GAAE,MAAgB,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC,CAK9F;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,oBAAoB,IAAI,OAAO,CAAC,IAAI,CAAC,CAK1D;AAED;;;;;;;;;;;;;GAaG;AACH,wBAAsB,gBAAgB,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAqBnE;AAED;;GAEG;AACH,wBAAgB,iCAAiC,CAAC,WAAW,CAAC,EAAE,MAAM,QAIrE;AAED;;GAEG;AACH,wBAAgB,kCAAkC,CAAC,qBAAqB,EAAE,GAAG,OAmB5E;AAED;;GAEG;AACH,wBAAsB,iCAAiC,IAAI,OAAO,CAAC,gCAAgC,CAAC,CAOnG"}
\ No newline at end of file
+{"version":3,"file":"Updates.d.ts","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,WAAW,EACX,QAAQ,EACR,iBAAiB,EACjB,iBAAiB,EACjB,8BAA8B,EAC9B,eAAe,EACf,gCAAgC,EACjC,MAAM,iBAAiB,CAAC;AAEzB;;;;;;;;GAQG;AACH,eAAO,MAAM,SAAS,EAAE,OAAiC,CAAC;AAE1D;;;;GAIG;AACH,eAAO,MAAM,QAAQ,EAAE,MAAM,GAAG,IAGtB,CAAC;AAEX;;;GAGG;AACH,eAAO,MAAM,cAAc,EAAE,MAAgD,CAAC;AAE9E;;;;GAIG;AACH,eAAO,MAAM,OAAO,EAAE,MAAM,GAAG,IAAkC,CAAC;AAElE;;GAEG;AACH,eAAO,MAAM,cAAc,EAAE,MAAM,GAAG,IAAyC,CAAC;AAShF;;GAEG;AACH,eAAO,MAAM,kBAAkB,EAAE,8BAA8B,GAAG,IACQ,CAAC;AAG3E;;GAEG;AACH,eAAO,MAAM,WAAW,EAAE,WAA2C,CAAC;AAEtE;;;;;;;;GAQG;AACH,eAAO,MAAM,iBAAiB,EAAE,OAAgD,CAAC;AAEjF;;;GAGG;AACH,eAAO,MAAM,gBAAgB,EAAE,OAA+C,CAAC;AAG/E;;GAEG;AACH,eAAO,MAAM,qBAAqB,EAAE,OAAoD,CAAC;AAEzF;;;;;;;;GAQG;AACH,eAAO,MAAM,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAEnC,CAAC;AAEL;;;;;GAKG;AACH,eAAO,MAAM,SAAS,EAAE,IAAI,GAAG,IAEvB,CAAC;AAoBT;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,wBAAsB,WAAW,IAAI,OAAO,CAAC,IAAI,CAAC,CAcjD;AAED;;;;;;;;;;;;;;GAcG;AACH,wBAAsB,mBAAmB,CAAC,OAAO,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAqBtF;AAED;;;;GAIG;AACH,wBAAsB,mBAAmB,IAAI,OAAO,CAAC;IAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;CAAE,CAAC,CAM9E;AAED;;;;;;GAMG;AACH,wBAAsB,kBAAkB,CACtC,GAAG,EAAE,MAAM,EACX,KAAK,EAAE,MAAM,GAAG,IAAI,GAAG,SAAS,GAC/B,OAAO,CAAC,IAAI,CAAC,CAMf;AAED;;;;;;;;GAQG;AACH,wBAAsB,mBAAmB,CAAC,MAAM,GAAE,MAAgB,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC,CAK9F;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,oBAAoB,IAAI,OAAO,CAAC,IAAI,CAAC,CAK1D;AAED;;;;;;;;;;;;;GAaG;AACH,wBAAsB,gBAAgB,CAAC,OAAO,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAqBnF;AAED;;GAEG;AACH,wBAAgB,iCAAiC,CAAC,WAAW,CAAC,EAAE,MAAM,QAIrE;AAED;;GAEG;AACH,wBAAgB,kCAAkC,CAAC,qBAAqB,EAAE,GAAG,OAmB5E;AAED;;GAEG;AACH,wBAAsB,iCAAiC,IAAI,OAAO,CAAC,gCAAgC,CAAC,CAOnG"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/Updates.js b/node_modules/expo-updates/build/Updates.js
index e73f55b..71744c2 100644
--- a/node_modules/expo-updates/build/Updates.js
+++ b/node_modules/expo-updates/build/Updates.js
@@ -149,7 +149,7 @@ export async function reloadAsync() {
  * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or
  * timeout communicating with the server. It also rejects when expo-updates is not enabled.
  */
-export async function checkForUpdateAsync() {
+export async function checkForUpdateAsync(channel) {
     if (!ExpoUpdates.checkForUpdateAsync) {
         throw new UnavailabilityError('Updates', 'checkForUpdateAsync');
     }
@@ -157,7 +157,7 @@ export async function checkForUpdateAsync() {
         !shouldDeferToNativeForAPIMethodAvailabilityInDevelopment) {
         throw new CodedError('ERR_UPDATES_DISABLED', `You cannot check for updates in development mode. ${manualUpdatesInstructions}`);
     }
-    const result = await ExpoUpdates.checkForUpdateAsync();
+    const result = await ExpoUpdates.checkForUpdateAsync(channel);
     if (result.manifestString) {
         result.manifest = JSON.parse(result.manifestString);
         delete result.manifestString;
@@ -234,7 +234,7 @@ export async function clearLogEntriesAsync() {
  * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or
  * timeout communicating with the server. It also rejects when expo-updates is not enabled.
  */
-export async function fetchUpdateAsync() {
+export async function fetchUpdateAsync(channel) {
     if (!ExpoUpdates.fetchUpdateAsync) {
         throw new UnavailabilityError('Updates', 'fetchUpdateAsync');
     }
@@ -242,7 +242,7 @@ export async function fetchUpdateAsync() {
         !shouldDeferToNativeForAPIMethodAvailabilityInDevelopment) {
         throw new CodedError('ERR_UPDATES_DISABLED', `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`);
     }
-    const result = await ExpoUpdates.fetchUpdateAsync();
+    const result = await ExpoUpdates.fetchUpdateAsync(channel);
     if (result.manifestString) {
         result.manifest = JSON.parse(result.manifestString);
         delete result.manifestString;
diff --git a/node_modules/expo-updates/build/Updates.js.map b/node_modules/expo-updates/build/Updates.js.map
index 36bf740..0c13d9e 100644
--- a/node_modules/expo-updates/build/Updates.js.map
+++ b/node_modules/expo-updates/build/Updates.js.map
@@ -1 +1 @@
-{"version":3,"file":"Updates.js","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoUpdates from './ExpoUpdates';\nimport {\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateFetchResult,\n  UpdatesCheckAutomaticallyValue,\n  UpdatesLogEntry,\n  UpdatesNativeStateMachineContext,\n} from './Updates.types';\n\n/**\n * Whether expo-updates is enabled. This may be false in a variety of cases including:\n * - enabled set to false in configuration\n * - missing or invalid URL in configuration\n * - missing runtime version or SDK version in configuration\n * - error accessing storage on device during initialization\n *\n * When false, the embedded update is loaded.\n */\nexport const isEnabled: boolean = !!ExpoUpdates.isEnabled;\n\n/**\n * The UUID that uniquely identifies the currently running update. The\n * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n * will always use lowercase letters. This value is `null` when running in a local development environment or any other environment where `expo-updates` is disabled.\n */\nexport const updateId: string | null =\n  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'\n    ? ExpoUpdates.updateId.toLowerCase()\n    : null;\n\n/**\n * The name of the release channel currently configured in this standalone or bare app when using\n * classic updates. When using Expo Updates, the value of this field is always `\"default\"`.\n */\nexport const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';\n\n/**\n * The channel name of the current build, if configured for use with EAS Update. `null` otherwise.\n *\n * Expo Go and development builds are not set to a specific channel and can run any updates compatible with their native runtime. Therefore, this value will always be `null` when running an update on Expo Go or a development build.\n */\nexport const channel: string | null = ExpoUpdates.channel ?? null;\n\n/**\n * The runtime version of the current build.\n */\nexport const runtimeVersion: string | null = ExpoUpdates.runtimeVersion ?? null;\n\nconst _checkAutomaticallyMapNativeToJS = {\n  ALWAYS: 'ON_LOAD',\n  ERROR_RECOVERY_ONLY: 'ON_ERROR_RECOVERY',\n  NEVER: 'NEVER',\n  WIFI_ONLY: 'WIFI_ONLY',\n};\n\n/**\n * Determines if and when expo-updates checks for and downloads updates automatically on startup.\n */\nexport const checkAutomatically: UpdatesCheckAutomaticallyValue | null =\n  _checkAutomaticallyMapNativeToJS[ExpoUpdates.checkAutomatically] ?? null;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\n\n/**\n * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n * you don't need to worry about backwards compatibility when you put out an update. In very rare\n * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n * can use this constant to provide special behavior for this rare case.\n */\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\n\n/**\n * This will be true if the currently running update is the one embedded in the build,\n * and not one downloaded from the updates server.\n */\nexport const isEmbeddedLaunch: boolean = ExpoUpdates.isEmbeddedLaunch || false;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;\n\n/**\n * If `expo-updates` is enabled, this is the\n * [manifest](/versions/latest/sdk/constants/#manifest) (or\n * [classic manifest](/versions/latest/sdk/constants/#appmanifest))\n * object for the update that's currently running.\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n * empty.\n */\nexport const manifest: Partial<Manifest> =\n  (ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) ??\n  {};\n\n/**\n * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this value is\n * null.\n */\nexport const createdAt: Date | null = ExpoUpdates.commitTime\n  ? new Date(ExpoUpdates.commitTime)\n  : null;\n\n/**\n * During non-expo development we block accessing the updates API methods on the JS side, but when developing in\n * Expo Go or a development client build, the controllers should have control over which API methods should\n * be allowed.\n */\nconst shouldDeferToNativeForAPIMethodAvailabilityInDevelopment =\n  !!ExpoUpdates.shouldDeferToNativeForAPIMethodAvailabilityInDevelopment;\n\n/**\n * Developer tool is set when a project is served by `expo start`.\n */\nconst isUsingDeveloperTool =\n  'extra' in manifest ? !!manifest.extra?.expoGo?.developer?.tool : false;\n\nconst manualUpdatesInstructions =\n  'To test usage of the expo-updates JS API in your app, make a release build with `npx expo run:ios --configuration Release` or ' +\n  '`npx expo run:android --variant Release`.';\n\n/**\n * Instructs the app to reload using the most recently downloaded version. This is useful for\n * triggering a newly downloaded update to launch without the user needing to manually restart the\n * app.\n *\n * It is not recommended to place any meaningful logic after a call to `await\n * Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can\n * be reloaded, and immediately before posting an asynchronous task to the main thread to actually\n * reload the app. It is unsafe to make any assumptions about whether any more JS code will be\n * executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and\n * the state of the native module and main threads.\n *\n * This method cannot be used in Expo Go or development mode, and the returned promise will be rejected if you\n * try to do so. It also rejects when expo-updates is not enabled.\n *\n * @return A promise that fulfills right before the reload instruction is sent to the JS runtime, or\n * rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\n * mode, it most likely means you have installed the module incorrectly. Double check you've\n * followed the installation instructions. In particular, on iOS ensure that you set the `bridge`\n * property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on\n * Android ensure you either call `UpdatesController.initialize` with the instance of\n * `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the\n * proper instance of `ReactNativeHost`.\n */\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  if (\n    (__DEV__ || isUsingDeveloperTool) &&\n    !shouldDeferToNativeForAPIMethodAvailabilityInDevelopment\n  ) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`\n    );\n  }\n  await ExpoUpdates.reload();\n}\n\n/**\n * Checks the server to see if a newly deployed update to your project is available. Does not\n * actually download the update. This method cannot be used in development mode, and the returned\n * promise will be rejected if you try to do so.\n *\n * Checking for an update uses a device's bandwidth and battery life like any network call.\n * Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for\n * updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for\n * updates in a frequent loop.\n *\n * @return A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.\n *\n * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server. It also rejects when expo-updates is not enabled.\n */\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  if (\n    (__DEV__ || isUsingDeveloperTool) &&\n    !shouldDeferToNativeForAPIMethodAvailabilityInDevelopment\n  ) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * Retrieves the current extra params.\n *\n * This method cannot be used in Expo Go or development mode. It also rejects when expo-updates is not enabled.\n */\nexport async function getExtraParamsAsync(): Promise<{ [key: string]: string }> {\n  if (!ExpoUpdates.getExtraParamsAsync) {\n    throw new UnavailabilityError('Updates', 'getExtraParamsAsync');\n  }\n\n  return await ExpoUpdates.getExtraParamsAsync();\n}\n\n/**\n * Sets an extra param if value is non-null, otherwise unsets the param.\n * Extra params are sent as an [Expo Structured Field Value Dictionary](https://docs.expo.dev/technical-specs/expo-sfv-0/)\n * in the `Expo-Extra-Params` header of update requests. A compliant update server may use these params when selecting an update to serve.\n *\n * This method cannot be used in Expo Go or development mode. It also rejects when expo-updates is not enabled.\n */\nexport async function setExtraParamAsync(\n  key: string,\n  value: string | null | undefined\n): Promise<void> {\n  if (!ExpoUpdates.setExtraParamAsync) {\n    throw new UnavailabilityError('Updates', 'setExtraParamAsync');\n  }\n\n  return await ExpoUpdates.setExtraParamAsync(key, value ?? null);\n}\n\n/**\n * Retrieves the most recent expo-updates log entries.\n *\n * @param maxAge Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour).\n *\n * @return A promise that fulfills with an array of [`UpdatesLogEntry`](#updateslogentry) objects;\n *\n * The promise rejects if there is an unexpected error in retrieving the logs.\n */\nexport async function readLogEntriesAsync(maxAge: number = 3600000): Promise<UpdatesLogEntry[]> {\n  if (!ExpoUpdates.readLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'readLogEntriesAsync');\n  }\n  return await ExpoUpdates.readLogEntriesAsync(maxAge);\n}\n\n/**\n * Clears existing expo-updates log entries.\n *\n * > For now, this operation does nothing on the client.  Once log persistence has been\n * > implemented, this operation will actually remove existing logs.\n *\n * @return A promise that fulfills if the clear operation was successful.\n *\n * The promise rejects if there is an unexpected error in clearing the logs.\n *\n */\nexport async function clearLogEntriesAsync(): Promise<void> {\n  if (!ExpoUpdates.clearLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'clearLogEntriesAsync');\n  }\n  await ExpoUpdates.clearLogEntriesAsync();\n}\n\n/**\n * Downloads the most recently deployed update to your project from server to the device's local\n * storage. This method cannot be used in development mode, and the returned promise will be\n * rejected if you try to do so.\n *\n > **Note:** [`reloadAsync()`](#updatesreloadasync) can be called after promise resolution to\n * reload the app using the most recently downloaded version. Otherwise, the update will be applied\n * on the next app cold start.\n *\n * @return A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.\n *\n * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server. It also rejects when expo-updates is not enabled.\n */\nexport async function fetchUpdateAsync(): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  if (\n    (__DEV__ || isUsingDeveloperTool) &&\n    !shouldDeferToNativeForAPIMethodAvailabilityInDevelopment\n  ) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * @hidden\n */\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {\n  console.warn(\n    \"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\"\n  );\n}\n\n/**\n * @hidden\n */\nexport function transformNativeStateMachineContext(originalNativeContext: any) {\n  const nativeContext = { ...originalNativeContext };\n  if (nativeContext.latestManifestString) {\n    nativeContext.latestManifest = JSON.parse(nativeContext.latestManifestString);\n    delete nativeContext.latestManifestString;\n  }\n  if (nativeContext.downloadedManifestString) {\n    nativeContext.downloadedManifest = JSON.parse(nativeContext.downloadedManifestString);\n    delete nativeContext.downloadedManifestString;\n  }\n  if (nativeContext.lastCheckForUpdateTimeString) {\n    nativeContext.lastCheckForUpdateTime = new Date(nativeContext.lastCheckForUpdateTimeString);\n    delete nativeContext.lastCheckForUpdateTimeString;\n  }\n  if (nativeContext.rollbackString) {\n    nativeContext.rollback = JSON.parse(nativeContext.rollbackString);\n    delete nativeContext.rollbackString;\n  }\n  return nativeContext;\n}\n\n/**\n * @hidden\n */\nexport async function getNativeStateMachineContextAsync(): Promise<UpdatesNativeStateMachineContext> {\n  // Return the current state machine context\n  if (!ExpoUpdates.getNativeStateMachineContextAsync) {\n    throw new UnavailabilityError('Updates', 'getNativeStateMachineContextAsync');\n  }\n  const nativeContext = await ExpoUpdates.getNativeStateMachineContextAsync();\n  return transformNativeStateMachineContext(nativeContext);\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"Updates.js","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoUpdates from './ExpoUpdates';\nimport {\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateFetchResult,\n  UpdatesCheckAutomaticallyValue,\n  UpdatesLogEntry,\n  UpdatesNativeStateMachineContext,\n} from './Updates.types';\n\n/**\n * Whether expo-updates is enabled. This may be false in a variety of cases including:\n * - enabled set to false in configuration\n * - missing or invalid URL in configuration\n * - missing runtime version or SDK version in configuration\n * - error accessing storage on device during initialization\n *\n * When false, the embedded update is loaded.\n */\nexport const isEnabled: boolean = !!ExpoUpdates.isEnabled;\n\n/**\n * The UUID that uniquely identifies the currently running update. The\n * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n * will always use lowercase letters. This value is `null` when running in a local development environment or any other environment where `expo-updates` is disabled.\n */\nexport const updateId: string | null =\n  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'\n    ? ExpoUpdates.updateId.toLowerCase()\n    : null;\n\n/**\n * The name of the release channel currently configured in this standalone or bare app when using\n * classic updates. When using Expo Updates, the value of this field is always `\"default\"`.\n */\nexport const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';\n\n/**\n * The channel name of the current build, if configured for use with EAS Update. `null` otherwise.\n *\n * Expo Go and development builds are not set to a specific channel and can run any updates compatible with their native runtime. Therefore, this value will always be `null` when running an update on Expo Go or a development build.\n */\nexport const channel: string | null = ExpoUpdates.channel ?? null;\n\n/**\n * The runtime version of the current build.\n */\nexport const runtimeVersion: string | null = ExpoUpdates.runtimeVersion ?? null;\n\nconst _checkAutomaticallyMapNativeToJS = {\n  ALWAYS: 'ON_LOAD',\n  ERROR_RECOVERY_ONLY: 'ON_ERROR_RECOVERY',\n  NEVER: 'NEVER',\n  WIFI_ONLY: 'WIFI_ONLY',\n};\n\n/**\n * Determines if and when expo-updates checks for and downloads updates automatically on startup.\n */\nexport const checkAutomatically: UpdatesCheckAutomaticallyValue | null =\n  _checkAutomaticallyMapNativeToJS[ExpoUpdates.checkAutomatically] ?? null;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\n\n/**\n * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n * you don't need to worry about backwards compatibility when you put out an update. In very rare\n * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n * can use this constant to provide special behavior for this rare case.\n */\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\n\n/**\n * This will be true if the currently running update is the one embedded in the build,\n * and not one downloaded from the updates server.\n */\nexport const isEmbeddedLaunch: boolean = ExpoUpdates.isEmbeddedLaunch || false;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;\n\n/**\n * If `expo-updates` is enabled, this is the\n * [manifest](/versions/latest/sdk/constants/#manifest) (or\n * [classic manifest](/versions/latest/sdk/constants/#appmanifest))\n * object for the update that's currently running.\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n * empty.\n */\nexport const manifest: Partial<Manifest> =\n  (ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) ??\n  {};\n\n/**\n * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this value is\n * null.\n */\nexport const createdAt: Date | null = ExpoUpdates.commitTime\n  ? new Date(ExpoUpdates.commitTime)\n  : null;\n\n/**\n * During non-expo development we block accessing the updates API methods on the JS side, but when developing in\n * Expo Go or a development client build, the controllers should have control over which API methods should\n * be allowed.\n */\nconst shouldDeferToNativeForAPIMethodAvailabilityInDevelopment =\n  !!ExpoUpdates.shouldDeferToNativeForAPIMethodAvailabilityInDevelopment;\n\n/**\n * Developer tool is set when a project is served by `expo start`.\n */\nconst isUsingDeveloperTool =\n  'extra' in manifest ? !!manifest.extra?.expoGo?.developer?.tool : false;\n\nconst manualUpdatesInstructions =\n  'To test usage of the expo-updates JS API in your app, make a release build with `npx expo run:ios --configuration Release` or ' +\n  '`npx expo run:android --variant Release`.';\n\n/**\n * Instructs the app to reload using the most recently downloaded version. This is useful for\n * triggering a newly downloaded update to launch without the user needing to manually restart the\n * app.\n *\n * It is not recommended to place any meaningful logic after a call to `await\n * Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can\n * be reloaded, and immediately before posting an asynchronous task to the main thread to actually\n * reload the app. It is unsafe to make any assumptions about whether any more JS code will be\n * executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and\n * the state of the native module and main threads.\n *\n * This method cannot be used in Expo Go or development mode, and the returned promise will be rejected if you\n * try to do so. It also rejects when expo-updates is not enabled.\n *\n * @return A promise that fulfills right before the reload instruction is sent to the JS runtime, or\n * rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\n * mode, it most likely means you have installed the module incorrectly. Double check you've\n * followed the installation instructions. In particular, on iOS ensure that you set the `bridge`\n * property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on\n * Android ensure you either call `UpdatesController.initialize` with the instance of\n * `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the\n * proper instance of `ReactNativeHost`.\n */\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  if (\n    (__DEV__ || isUsingDeveloperTool) &&\n    !shouldDeferToNativeForAPIMethodAvailabilityInDevelopment\n  ) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`\n    );\n  }\n  await ExpoUpdates.reload();\n}\n\n/**\n * Checks the server to see if a newly deployed update to your project is available. Does not\n * actually download the update. This method cannot be used in development mode, and the returned\n * promise will be rejected if you try to do so.\n *\n * Checking for an update uses a device's bandwidth and battery life like any network call.\n * Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for\n * updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for\n * updates in a frequent loop.\n *\n * @return A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.\n *\n * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server. It also rejects when expo-updates is not enabled.\n */\nexport async function checkForUpdateAsync(channel?: string): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  if (\n    (__DEV__ || isUsingDeveloperTool) &&\n    !shouldDeferToNativeForAPIMethodAvailabilityInDevelopment\n  ) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync(channel);\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * Retrieves the current extra params.\n *\n * This method cannot be used in Expo Go or development mode. It also rejects when expo-updates is not enabled.\n */\nexport async function getExtraParamsAsync(): Promise<{ [key: string]: string }> {\n  if (!ExpoUpdates.getExtraParamsAsync) {\n    throw new UnavailabilityError('Updates', 'getExtraParamsAsync');\n  }\n\n  return await ExpoUpdates.getExtraParamsAsync();\n}\n\n/**\n * Sets an extra param if value is non-null, otherwise unsets the param.\n * Extra params are sent as an [Expo Structured Field Value Dictionary](https://docs.expo.dev/technical-specs/expo-sfv-0/)\n * in the `Expo-Extra-Params` header of update requests. A compliant update server may use these params when selecting an update to serve.\n *\n * This method cannot be used in Expo Go or development mode. It also rejects when expo-updates is not enabled.\n */\nexport async function setExtraParamAsync(\n  key: string,\n  value: string | null | undefined\n): Promise<void> {\n  if (!ExpoUpdates.setExtraParamAsync) {\n    throw new UnavailabilityError('Updates', 'setExtraParamAsync');\n  }\n\n  return await ExpoUpdates.setExtraParamAsync(key, value ?? null);\n}\n\n/**\n * Retrieves the most recent expo-updates log entries.\n *\n * @param maxAge Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour).\n *\n * @return A promise that fulfills with an array of [`UpdatesLogEntry`](#updateslogentry) objects;\n *\n * The promise rejects if there is an unexpected error in retrieving the logs.\n */\nexport async function readLogEntriesAsync(maxAge: number = 3600000): Promise<UpdatesLogEntry[]> {\n  if (!ExpoUpdates.readLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'readLogEntriesAsync');\n  }\n  return await ExpoUpdates.readLogEntriesAsync(maxAge);\n}\n\n/**\n * Clears existing expo-updates log entries.\n *\n * > For now, this operation does nothing on the client.  Once log persistence has been\n * > implemented, this operation will actually remove existing logs.\n *\n * @return A promise that fulfills if the clear operation was successful.\n *\n * The promise rejects if there is an unexpected error in clearing the logs.\n *\n */\nexport async function clearLogEntriesAsync(): Promise<void> {\n  if (!ExpoUpdates.clearLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'clearLogEntriesAsync');\n  }\n  await ExpoUpdates.clearLogEntriesAsync();\n}\n\n/**\n * Downloads the most recently deployed update to your project from server to the device's local\n * storage. This method cannot be used in development mode, and the returned promise will be\n * rejected if you try to do so.\n *\n > **Note:** [`reloadAsync()`](#updatesreloadasync) can be called after promise resolution to\n * reload the app using the most recently downloaded version. Otherwise, the update will be applied\n * on the next app cold start.\n *\n * @return A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.\n *\n * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server. It also rejects when expo-updates is not enabled.\n */\nexport async function fetchUpdateAsync(channel?: string): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  if (\n    (__DEV__ || isUsingDeveloperTool) &&\n    !shouldDeferToNativeForAPIMethodAvailabilityInDevelopment\n  ) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync(channel);\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * @hidden\n */\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {\n  console.warn(\n    \"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\"\n  );\n}\n\n/**\n * @hidden\n */\nexport function transformNativeStateMachineContext(originalNativeContext: any) {\n  const nativeContext = { ...originalNativeContext };\n  if (nativeContext.latestManifestString) {\n    nativeContext.latestManifest = JSON.parse(nativeContext.latestManifestString);\n    delete nativeContext.latestManifestString;\n  }\n  if (nativeContext.downloadedManifestString) {\n    nativeContext.downloadedManifest = JSON.parse(nativeContext.downloadedManifestString);\n    delete nativeContext.downloadedManifestString;\n  }\n  if (nativeContext.lastCheckForUpdateTimeString) {\n    nativeContext.lastCheckForUpdateTime = new Date(nativeContext.lastCheckForUpdateTimeString);\n    delete nativeContext.lastCheckForUpdateTimeString;\n  }\n  if (nativeContext.rollbackString) {\n    nativeContext.rollback = JSON.parse(nativeContext.rollbackString);\n    delete nativeContext.rollbackString;\n  }\n  return nativeContext;\n}\n\n/**\n * @hidden\n */\nexport async function getNativeStateMachineContextAsync(): Promise<UpdatesNativeStateMachineContext> {\n  // Return the current state machine context\n  if (!ExpoUpdates.getNativeStateMachineContextAsync) {\n    throw new UnavailabilityError('Updates', 'getNativeStateMachineContextAsync');\n  }\n  const nativeContext = await ExpoUpdates.getNativeStateMachineContextAsync();\n  return transformNativeStateMachineContext(nativeContext);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/ios/EXUpdates/AppController.swift b/node_modules/expo-updates/ios/EXUpdates/AppController.swift
index 6cf97ea..fbde906 100644
--- a/node_modules/expo-updates/ios/EXUpdates/AppController.swift
+++ b/node_modules/expo-updates/ios/EXUpdates/AppController.swift
@@ -100,10 +100,12 @@ public protocol InternalAppControllerInterface: AppControllerInterface {
     error errorBlockArg: @escaping (_ error: Exception) -> Void
   )
   func checkForUpdate(
+    channel: String?,
     success successBlockArg: @escaping (_ checkForUpdateResult: CheckForUpdateResult) -> Void,
     error errorBlockArg: @escaping (_ error: Exception) -> Void
   )
   func fetchUpdate(
+    channel: String?,
     success successBlockArg: @escaping (_ fetchUpdateResult: FetchUpdateResult) -> Void,
     error errorBlockArg: @escaping (_ error: Exception) -> Void
   )
diff --git a/node_modules/expo-updates/ios/EXUpdates/DevLauncherAppController.swift b/node_modules/expo-updates/ios/EXUpdates/DevLauncherAppController.swift
index f9bd8f5..a75474b 100644
--- a/node_modules/expo-updates/ios/EXUpdates/DevLauncherAppController.swift
+++ b/node_modules/expo-updates/ios/EXUpdates/DevLauncherAppController.swift
@@ -322,11 +322,11 @@ public final class DevLauncherAppController: NSObject, InternalAppControllerInte
     }
   }
 
-  public func checkForUpdate(success successBlockArg: @escaping (CheckForUpdateResult) -> Void, error errorBlockArg: @escaping (ExpoModulesCore.Exception) -> Void) {
+  public func checkForUpdate(channel: String?, success successBlockArg: @escaping (CheckForUpdateResult) -> Void, error errorBlockArg: @escaping (ExpoModulesCore.Exception) -> Void) {
     errorBlockArg(NotAvailableInDevClientException())
   }
 
-  public func fetchUpdate(success successBlockArg: @escaping (FetchUpdateResult) -> Void, error errorBlockArg: @escaping (ExpoModulesCore.Exception) -> Void) {
+  public func fetchUpdate(channel: String?, success successBlockArg: @escaping (FetchUpdateResult) -> Void, error errorBlockArg: @escaping (ExpoModulesCore.Exception) -> Void) {
     errorBlockArg(NotAvailableInDevClientException())
   }
 
diff --git a/node_modules/expo-updates/ios/EXUpdates/DisabledAppController.swift b/node_modules/expo-updates/ios/EXUpdates/DisabledAppController.swift
index 977e289..6288e0a 100644
--- a/node_modules/expo-updates/ios/EXUpdates/DisabledAppController.swift
+++ b/node_modules/expo-updates/ios/EXUpdates/DisabledAppController.swift
@@ -91,6 +91,7 @@ public class DisabledAppController: InternalAppControllerInterface {
   }
 
   public func checkForUpdate(
+    channel: String?,
     success successBlockArg: @escaping (CheckForUpdateResult) -> Void,
     error errorBlockArg: @escaping (ExpoModulesCore.Exception) -> Void
   ) {
@@ -98,6 +99,7 @@ public class DisabledAppController: InternalAppControllerInterface {
   }
 
   public func fetchUpdate(
+    channel: String?,
     success successBlockArg: @escaping (FetchUpdateResult) -> Void,
     error errorBlockArg: @escaping (ExpoModulesCore.Exception) -> Void
   ) {
diff --git a/node_modules/expo-updates/ios/EXUpdates/EnabledAppController.swift b/node_modules/expo-updates/ios/EXUpdates/EnabledAppController.swift
index 5dc283d..3deb444 100644
--- a/node_modules/expo-updates/ios/EXUpdates/EnabledAppController.swift
+++ b/node_modules/expo-updates/ios/EXUpdates/EnabledAppController.swift
@@ -257,12 +257,27 @@ public class EnabledAppController: UpdatesStateChangeDelegate, InternalAppContro
   }
 
   public func checkForUpdate(
+    channel: String?,
     success successBlockArg: @escaping (_ checkForUpdateResult: CheckForUpdateResult) -> Void,
     error errorBlockArg: @escaping (_ error: Exception) -> Void
   ) {
+    var updatesConfiguration =  self.config;
+
+    if (channel != nil) {
+      do {
+      updatesConfiguration = try UpdatesConfig.configWithExpoPlist(mergingOtherDictionary: [
+        "EXUpdatesRequestHeaders": [
+          "expo-channel-name": channel,
+        ] as [String: Any]
+      ] as [String: Any])
+      } catch {
+        errorBlockArg(UnexpectedException(error))
+      }
+    }
+
     let procedure = CheckForUpdateProcedure(
       database: self.database,
-      config: self.config,
+      config: updatesConfiguration,
       selectionPolicy: self.selectionPolicy,
       logger: self.logger
     ) {
@@ -276,12 +291,27 @@ public class EnabledAppController: UpdatesStateChangeDelegate, InternalAppContro
   }
 
   public func fetchUpdate(
+    channel: String?,
     success successBlockArg: @escaping (_ fetchUpdateResult: FetchUpdateResult) -> Void,
     error errorBlockArg: @escaping (_ error: Exception) -> Void
   ) {
+    var updatesConfiguration =  self.config;
+
+    if (channel != nil) {
+      do {
+      updatesConfiguration = try UpdatesConfig.configWithExpoPlist(mergingOtherDictionary: [
+        "EXUpdatesRequestHeaders": [
+          "expo-channel-name": channel,
+        ] as [String: Any]
+      ] as [String: Any])
+      } catch {
+        errorBlockArg(UnexpectedException(error))
+      }
+    }
+    
     let procedure = FetchUpdateProcedure(
       database: self.database,
-      config: self.config,
+      config: updatesConfiguration,
       selectionPolicy: self.selectionPolicy,
       controllerQueue: self.controllerQueue,
       updatesDirectory: self.updatesDirectoryInternal,
diff --git a/node_modules/expo-updates/ios/EXUpdates/UpdatesModule.swift b/node_modules/expo-updates/ios/EXUpdates/UpdatesModule.swift
index cde1438..afcb167 100644
--- a/node_modules/expo-updates/ios/EXUpdates/UpdatesModule.swift
+++ b/node_modules/expo-updates/ios/EXUpdates/UpdatesModule.swift
@@ -72,8 +72,8 @@ public final class UpdatesModule: Module {
       }
     }
 
-    AsyncFunction("checkForUpdateAsync") { (promise: Promise) in
-      AppController.sharedInstance.checkForUpdate { checkForUpdateResult in
+    AsyncFunction("checkForUpdateAsync") { (channel: String?, promise: Promise) in
+      AppController.sharedInstance.checkForUpdate(channel: channel) { checkForUpdateResult in
         switch checkForUpdateResult {
         case .noUpdateAvailable(let reason):
           promise.resolve([
@@ -139,8 +139,8 @@ public final class UpdatesModule: Module {
       }
     }
 
-    AsyncFunction("fetchUpdateAsync") { (promise: Promise) in
-      AppController.sharedInstance.fetchUpdate { fetchUpdateResult in
+    AsyncFunction("fetchUpdateAsync") { (channel: String?, promise: Promise) in
+      AppController.sharedInstance.fetchUpdate(channel: channel) { fetchUpdateResult in
         switch fetchUpdateResult {
         case .success(let manifest):
           promise.resolve([
diff --git a/node_modules/expo-updates/src/Updates.ts b/node_modules/expo-updates/src/Updates.ts
index e445245..1232245 100644
--- a/node_modules/expo-updates/src/Updates.ts
+++ b/node_modules/expo-updates/src/Updates.ts
@@ -188,7 +188,7 @@ export async function reloadAsync(): Promise<void> {
  * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or
  * timeout communicating with the server. It also rejects when expo-updates is not enabled.
  */
-export async function checkForUpdateAsync(): Promise<UpdateCheckResult> {
+export async function checkForUpdateAsync(channel?: string): Promise<UpdateCheckResult> {
   if (!ExpoUpdates.checkForUpdateAsync) {
     throw new UnavailabilityError('Updates', 'checkForUpdateAsync');
   }
@@ -202,7 +202,7 @@ export async function checkForUpdateAsync(): Promise<UpdateCheckResult> {
     );
   }
 
-  const result = await ExpoUpdates.checkForUpdateAsync();
+  const result = await ExpoUpdates.checkForUpdateAsync(channel);
   if (result.manifestString) {
     result.manifest = JSON.parse(result.manifestString);
     delete result.manifestString;
@@ -290,7 +290,7 @@ export async function clearLogEntriesAsync(): Promise<void> {
  * The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or
  * timeout communicating with the server. It also rejects when expo-updates is not enabled.
  */
-export async function fetchUpdateAsync(): Promise<UpdateFetchResult> {
+export async function fetchUpdateAsync(channel?: string): Promise<UpdateFetchResult> {
   if (!ExpoUpdates.fetchUpdateAsync) {
     throw new UnavailabilityError('Updates', 'fetchUpdateAsync');
   }
@@ -304,7 +304,7 @@ export async function fetchUpdateAsync(): Promise<UpdateFetchResult> {
     );
   }
 
-  const result = await ExpoUpdates.fetchUpdateAsync();
+  const result = await ExpoUpdates.fetchUpdateAsync(channel);
   if (result.manifestString) {
     result.manifest = JSON.parse(result.manifestString);
     delete result.manifestString;
